
package service;

import java.util.Date;
import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BLFacade", targetNamespace = "http://businessLogic/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BLFacade {


    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<service.Ride>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRides", targetNamespace = "http://businessLogic/", className = "service.GetRides")
    @ResponseWrapper(localName = "getRidesResponse", targetNamespace = "http://businessLogic/", className = "service.GetRidesResponse")
    @Action(input = "http://businessLogic/BLFacade/getRidesRequest", output = "http://businessLogic/BLFacade/getRidesResponse")
    public List<Ride> getRides(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        XMLGregorianCalendar arg2);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDestinationCities", targetNamespace = "http://businessLogic/", className = "service.GetDestinationCities")
    @ResponseWrapper(localName = "getDestinationCitiesResponse", targetNamespace = "http://businessLogic/", className = "service.GetDestinationCitiesResponse")
    @Action(input = "http://businessLogic/BLFacade/getDestinationCitiesRequest", output = "http://businessLogic/BLFacade/getDestinationCitiesResponse")
    public List<String> getDestinationCities(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDepartCities", targetNamespace = "http://businessLogic/", className = "service.GetDepartCities")
    @ResponseWrapper(localName = "getDepartCitiesResponse", targetNamespace = "http://businessLogic/", className = "service.GetDepartCitiesResponse")
    @Action(input = "http://businessLogic/BLFacade/getDepartCitiesRequest", output = "http://businessLogic/BLFacade/getDepartCitiesResponse")
    public List<String> getDepartCities();

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @return
     *     returns service.Ride
     * @throws RideAlreadyExistException_Exception
     * @throws RideMustBeLaterThanTodayException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createRide", targetNamespace = "http://businessLogic/", className = "service.CreateRide")
    @ResponseWrapper(localName = "createRideResponse", targetNamespace = "http://businessLogic/", className = "service.CreateRideResponse")
    @Action(input = "http://businessLogic/BLFacade/createRideRequest", output = "http://businessLogic/BLFacade/createRideResponse", fault = {
        @FaultAction(className = RideMustBeLaterThanTodayException_Exception.class, value = "http://businessLogic/BLFacade/createRide/Fault/RideMustBeLaterThanTodayException"),
        @FaultAction(className = RideAlreadyExistException_Exception.class, value = "http://businessLogic/BLFacade/createRide/Fault/RideAlreadyExistException")
    })
    public Ride createRide(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        XMLGregorianCalendar arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        int arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        float arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5)
        throws RideAlreadyExistException_Exception, RideMustBeLaterThanTodayException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<javax.xml.datatype.XMLGregorianCalendar>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getThisMonthDatesWithRides", targetNamespace = "http://businessLogic/", className = "service.GetThisMonthDatesWithRides")
    @ResponseWrapper(localName = "getThisMonthDatesWithRidesResponse", targetNamespace = "http://businessLogic/", className = "service.GetThisMonthDatesWithRidesResponse")
    @Action(input = "http://businessLogic/BLFacade/getThisMonthDatesWithRidesRequest", output = "http://businessLogic/BLFacade/getThisMonthDatesWithRidesResponse")
    public List<XMLGregorianCalendar> getThisMonthDatesWithRides(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        XMLGregorianCalendar arg2);

    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "initializeBD", targetNamespace = "http://businessLogic/", className = "service.InitializeBD")
    @ResponseWrapper(localName = "initializeBDResponse", targetNamespace = "http://businessLogic/", className = "service.InitializeBDResponse")
    @Action(input = "http://businessLogic/BLFacade/initializeBDRequest", output = "http://businessLogic/BLFacade/initializeBDResponse")
    public void initializeBD();

}
